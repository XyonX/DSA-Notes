// Online C++ compiler to run C++ program online
#include <iostream>
#include <bits/stdc++.h>

using namespace std;

struct node{
    int data;
    node*left;
    node*right;
    node(int val){
        data=val;
        left =NULL;
        right=NULL;
    }
};

//for a tree 1,2,3,4,5,6,7
//expected output 1,2,4,5,3,6,7
// pre order
void tree_pre(node* n){
    if(n==NULL)return;
    
    
        //printing data
    cout<<n->data;
    // calling left
    tree_pre(n->left);
    //calling right
    tree_pre(n->right);
    
}

//for a tree 1,2,3,4,5,6,7
//expected output: 4,2,5,1,6,3,7
// in order
void tree_in(node* n){
    if(n==NULL)return;
   

    // calling left
    tree_in(n->left);
    //printing data
    cout<<n->data; 
    //calling right
    tree_in(n->right);
    
}
//for a tree 1,2,3,4,5,6,7
//expected output: 4,5,2,6,7,3,1
// post order

void tree_po(node* n){
    if(n==NULL)return;
   

    // calling left
    tree_po(n->left);
    //calling right
    tree_po(n->right);
    //printing data
    cout<<n->data; 
    
}
//TODO implement
node* create_tree(){
    return NULL;
}


int traverse(node*n){
    //this first chek is for when the node might have one child 
    if(n==NULL)return 0;
    
    //if both node has two child it is enoguh but we need the earlier chck for all the case
    if(n->left ==NULL && n->right ==NULL)return 1;
    int numLeafLeft =traverse(n->left);
    int numLeafRight =traverse(n->right);
    return numLeafLeft+numLeafRight;
}

int numLeafNodes(node*root){
    return traverse(root);
}

//height of a binray tree
// heihgt refers to the max height between left and right node

int traverse_2(node*root){
    if(root== NULL)return 0;
    
    int leftHeight = 1+traverse_2(root->left);
    int rightHeight = 1+traverse_2(root->right);
    return max(leftHeight,rightHeight);
    
    
}

int heightOfTree(node*root){
    return traverse_2(root);
}

int main() {
    
    
    node*root = new node(1);
    
    root->left=new node(2);
    root->right = new node(3);
    
    root->left->left=new node(4);
    root->left->right=new node(5);
    
    root->right->left=new node(6);
    root->right->right=new node(7);
    
    cout<<"pre order traversal output: ";
    tree_pre(root);
    cout<<endl;
    cout<<"In order traversal outoput: ";
    tree_in(root);
    cout<<endl;
    cout<<"Post order traversal outoput: ";
    tree_po(root);
    cout<<endl;
    
    cout<<"Number of leaf node: "<<numLeafNodes(root);
    cout<<"Hiehgt of tree : " <<heightOfTree(root);
    
    

    return 0;
}