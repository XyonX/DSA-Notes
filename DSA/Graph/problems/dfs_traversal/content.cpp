#include <bits/stdc++.h>\nusing namespace std;\n\n// Simple DFS (prints each node when first visited)\nvoid dfs(int u, const vector<vector<int>>& adj, vector<int>& visited) {\n    if (visited[u]) return;\n    visited[u] = 1;\n    cout << u << ' ';\n    for (int v : adj[u]) {\n        dfs(v, adj, visited);\n    }\n}\n\nint main() {\n    // Example directed graph with 9 nodes: 0..8\n    // ASCII diagram (two components)\n    //\n    // Component A:\n    //  0 ──► 1 ──► 3 ──► 5\n    //  │               ▲\n    //  │               │\n    //  └──► 2 ──► 4 ───┘\n    //               │\n    //               └──► 6\n    //\n    // Edges:\n    //  0 -> 1, 2\n    //  1 -> 3\n    //  2 -> 4\n    //  3 -> 5\n    //  4 -> 5, 6\n    //  5 -> 2          (creates a cycle 2 -> 4 -> 5 -> 2)\n    //  6 -> (none)\n    //\n    // Component B:\n    //  7 ──► 8\n    //\n    // Note:\n    // - This is a DIRECTED graph. For undirected graphs, add edges both ways.\n\n    int n = 9;\n    vector<vector<int>> adj(n);\n\n    // Build edges for Component A\n    adj[0] = {1, 2};\n    adj[1] = {3};\n    adj[2] = {4};\n    adj[3] = {5};\n    adj[4] = {5, 6};\n    adj[5] = {2};\n    // adj[6] = {}; // implicit empty\n\n    // Build edges for Component B\n    adj[7] = {8};\n    // adj[8] = {}; // implicit empty\n\n    // 1) Run DFS from a chosen start node\n    {\n        vector<int> visited(n, 0);\n        int start = 0;\n        cout << \"DFS starting from node \" << start << \": \";\n        dfs(start, adj, visited);\n        cout << \"\\n\";\n        // Expected order (given adjacency above): 0 1 3 5 2 4 6\n        // (Order can vary if you change adjacency list ordering)\n    }\n\n    // 2) Run DFS over the whole graph to cover disconnected components\n    {\n        vector<int> visited(n, 0);\n        int comp = 0;\n        cout << \"Full graph DFS by components:\\n\";\n        for (int u = 0; u < n; ++u) {\n            if (!visited[u]) {\n                cout << \"Component \" << (++comp) << \": \";\n                dfs(u, adj, visited);\n                cout << \"\\n\";\n            }\n        }\n        // Expected:\n        // Component 1: 0 1 3 5 2 4 6\n        // Component 2: 7 8\n    }\n\n    return 0;\n}